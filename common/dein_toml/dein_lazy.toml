##############################
## 補完系plugin
##############################
# vimがluaに対応しているかどうかで何を使うかを決める
# lua非対応 : neocomplcache
# lua対応   : neocomplete
[[plugins]]
repo     = 'Shougo/neocomplcache.vim'
if       = '''! has('lua')'''
on_event = 'InsertEnter'
hook_add = '''
    " 補完を有効化
    let g:neocomplcache_enable_at_startup = 1
    " AutoComplPopを封印
    let g:acp_enableAtStartup = 0
    " 大文字小文字を無視
    let g:neocomplcache_enable_smart_case = 1
    " "_"区切りの補完を有効化
    let g:neocomplcache_enable_underbar_completion = 1
    " シンタックスをキャッシュする際の最小文字数
    let g:neocomplcache_min_syntax_length = 3
    " 補完を自動的にlockするbuffer名のパターン
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
    " ファイルタイプ毎のdictionary
    let g:neocomplcache_dictionary_filetype_lists = {
        \ 'default' : ''
        \ }

    " 補完を無かったことにする
    inoremap <expr><C-g> neocomplcache#undo_completion()
    " 補完候補から、共通する箇所を補完(シェル補完みたいなやつ)
    inoremap <expr><C-l> neocomplcache#complete_common_string()

    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return neocomplcache#smart_close_popup() . "\<CR>"
    endfunction
    " TABキーで補完候補選択
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " Popupを閉じる
    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
    " 候補確定
    inoremap <expr><C-y>  neocomplcache#close_popup()
    " 候補をキャンセルし、Popupを閉じる
    inoremap <expr><C-e>  neocomplcache#cancel_popup()
'''

[[plugins]]
repo     = 'Shougo/neocomplete.vim'
if       = ''' has('lua')'''
on_event = 'InsertEnter'
hook_add = '''
    " AutoComplPopを封印
    let g:acp_enableAtStartup = 0
    " 補完を有効化
    let g:neocomplete#enable_at_startup = 1
    " 大文字小文字を無視
    let g:neocomplete#enable_smart_case = 1
    " シンタックスをキャッシュする際の最小文字数
    let g:neocomplete#sources#syntax#min_keyword_length = 3

    " ファイルタイプ毎のdictionary
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " 補完を無かったことにする
    inoremap <expr><C-g>     neocomplete#undo_completion()
    " 補完候補から、共通する箇所を補完(シェル補完みたいなやつ)
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    endfunction
    " TABキーで補完候補選択
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " Popupを閉じる
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><Space> pumvisible() ? "\<C-y><Space>" : "\<Space>"
'''

[[plugins]]
repo     = 'Shougo/neosnippet.vim'
on_event = 'InsertEnter'
hook_add = '''
    " 一部のfile typeに対して独自snippetを使う(他はsnippet-snippets任せ)
    let g:neosnippet#snippets_directory = '~/.vim/snippets'
    let g:neosnippet#disable_runtime_snippets = {
        \ 'c'  : 1,
        \ 'cpp': 1,
    \}

    " Tab押下で次の入力位置にジャンプ
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    if has('conceal')
        set conceallevel=2 concealcursor=niv
    endif

    " snippet候補を展開(マーカーのjump等にも使う)
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo     = 'Shougo/neosnippet-snippets'
on_event = 'InsertEnter'
depends  = ['neosnippet.vim']

##############################
## HTML補完
##############################
[[plugins]]
repo  = 'mattn/emmet-vim'
on_ft = ['html', 'plantuml']

##############################
## toml用シンタックス
##############################
[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = 'toml'

##############################
## plantuml用シンタックス
##############################
[[plugins]]
repo  = 'aklt/plantuml-syntax'
on_ft = 'plantuml'

